#############################################################################
# Makefile for building: src
# Generated by qmake (2.01a) (Qt 4.7.3) on: jeu. juin 9 09:08:57 2011
# Project:  src.pro
# Template: app
# Command: /usr/bin/qmake -o Makefile src.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -march=i686 -mtune=generic -O2 -pipe -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -pipe -march=i686 -mtune=generic -O2 -pipe -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt/mkspecs/linux-g++ -I. -I/usr/include/QtCore -I/usr/include/QtGui -I/usr/include -I. -I.
LINK          = g++
LFLAGS        = -Wl,--hash-style=gnu -Wl,--as-needed -Wl,-O1
LIBS          = $(SUBLIBS)  -L/usr/lib -lQtGui -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = Ant.cpp \
		Bowling.cpp \
		Bug.cpp \
		Hatchery.cpp \
		main.cpp \
		Mosquito.cpp \
		Paintball.cpp \
		Projectile.cpp \
		Render.cpp \
		Roach.cpp \
		Stone.cpp \
		Tower.cpp \
		UI.cpp \
		Wasp.cpp \
		Water.cpp moc_Ant.cpp \
		moc_Bug.cpp \
		moc_Projectile.cpp \
		moc_Render.cpp \
		moc_Tower.cpp \
		moc_UI.cpp
OBJECTS       = Ant.o \
		Bowling.o \
		Bug.o \
		Hatchery.o \
		main.o \
		Mosquito.o \
		Paintball.o \
		Projectile.o \
		Render.o \
		Roach.o \
		Stone.o \
		Tower.o \
		UI.o \
		Wasp.o \
		Water.o \
		moc_Ant.o \
		moc_Bug.o \
		moc_Projectile.o \
		moc_Render.o \
		moc_Tower.o \
		moc_UI.o
DIST          = /usr/share/qt/mkspecs/common/g++.conf \
		/usr/share/qt/mkspecs/common/unix.conf \
		/usr/share/qt/mkspecs/common/linux.conf \
		/usr/share/qt/mkspecs/qconfig.pri \
		/usr/share/qt/mkspecs/modules/qt_webkit_version.pri \
		/usr/share/qt/mkspecs/features/qt_functions.prf \
		/usr/share/qt/mkspecs/features/qt_config.prf \
		/usr/share/qt/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt/mkspecs/features/default_pre.prf \
		/usr/share/qt/mkspecs/features/release.prf \
		/usr/share/qt/mkspecs/features/default_post.prf \
		/usr/share/qt/mkspecs/features/warn_on.prf \
		/usr/share/qt/mkspecs/features/qt.prf \
		/usr/share/qt/mkspecs/features/unix/thread.prf \
		/usr/share/qt/mkspecs/features/moc.prf \
		/usr/share/qt/mkspecs/features/resources.prf \
		/usr/share/qt/mkspecs/features/uic.prf \
		/usr/share/qt/mkspecs/features/yacc.prf \
		/usr/share/qt/mkspecs/features/lex.prf \
		/usr/share/qt/mkspecs/features/include_source_dir.prf \
		src.pro
QMAKE_TARGET  = src
DESTDIR       = 
TARGET        = src

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: src.pro  /usr/share/qt/mkspecs/linux-g++/qmake.conf /usr/share/qt/mkspecs/common/g++.conf \
		/usr/share/qt/mkspecs/common/unix.conf \
		/usr/share/qt/mkspecs/common/linux.conf \
		/usr/share/qt/mkspecs/qconfig.pri \
		/usr/share/qt/mkspecs/modules/qt_webkit_version.pri \
		/usr/share/qt/mkspecs/features/qt_functions.prf \
		/usr/share/qt/mkspecs/features/qt_config.prf \
		/usr/share/qt/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt/mkspecs/features/default_pre.prf \
		/usr/share/qt/mkspecs/features/release.prf \
		/usr/share/qt/mkspecs/features/default_post.prf \
		/usr/share/qt/mkspecs/features/warn_on.prf \
		/usr/share/qt/mkspecs/features/qt.prf \
		/usr/share/qt/mkspecs/features/unix/thread.prf \
		/usr/share/qt/mkspecs/features/moc.prf \
		/usr/share/qt/mkspecs/features/resources.prf \
		/usr/share/qt/mkspecs/features/uic.prf \
		/usr/share/qt/mkspecs/features/yacc.prf \
		/usr/share/qt/mkspecs/features/lex.prf \
		/usr/share/qt/mkspecs/features/include_source_dir.prf \
		/usr/lib/libQtGui.prl \
		/usr/lib/libQtCore.prl
	$(QMAKE) -o Makefile src.pro
/usr/share/qt/mkspecs/common/g++.conf:
/usr/share/qt/mkspecs/common/unix.conf:
/usr/share/qt/mkspecs/common/linux.conf:
/usr/share/qt/mkspecs/qconfig.pri:
/usr/share/qt/mkspecs/modules/qt_webkit_version.pri:
/usr/share/qt/mkspecs/features/qt_functions.prf:
/usr/share/qt/mkspecs/features/qt_config.prf:
/usr/share/qt/mkspecs/features/exclusive_builds.prf:
/usr/share/qt/mkspecs/features/default_pre.prf:
/usr/share/qt/mkspecs/features/release.prf:
/usr/share/qt/mkspecs/features/default_post.prf:
/usr/share/qt/mkspecs/features/warn_on.prf:
/usr/share/qt/mkspecs/features/qt.prf:
/usr/share/qt/mkspecs/features/unix/thread.prf:
/usr/share/qt/mkspecs/features/moc.prf:
/usr/share/qt/mkspecs/features/resources.prf:
/usr/share/qt/mkspecs/features/uic.prf:
/usr/share/qt/mkspecs/features/yacc.prf:
/usr/share/qt/mkspecs/features/lex.prf:
/usr/share/qt/mkspecs/features/include_source_dir.prf:
/usr/lib/libQtGui.prl:
/usr/lib/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -o Makefile src.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/src1.0.0 || $(MKDIR) .tmp/src1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/src1.0.0/ && $(COPY_FILE) --parents Ant.h Bowling.h Bug.h define.h Hatchery.h Mosquito.h Paintball.h Projectile.h Render.h Roach.h Stone.h Tower.h UI.h Wasp.h Water.h .tmp/src1.0.0/ && $(COPY_FILE) --parents Ant.cpp Bowling.cpp Bug.cpp Hatchery.cpp main.cpp Mosquito.cpp Paintball.cpp Projectile.cpp Render.cpp Roach.cpp Stone.cpp Tower.cpp UI.cpp Wasp.cpp Water.cpp .tmp/src1.0.0/ && (cd `dirname .tmp/src1.0.0` && $(TAR) src1.0.0.tar src1.0.0 && $(COMPRESS) src1.0.0.tar) && $(MOVE) `dirname .tmp/src1.0.0`/src1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/src1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_Ant.cpp moc_Bug.cpp moc_Projectile.cpp moc_Render.cpp moc_Tower.cpp moc_UI.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_Ant.cpp moc_Bug.cpp moc_Projectile.cpp moc_Render.cpp moc_Tower.cpp moc_UI.cpp
moc_Ant.cpp: Bug.h \
		define.h \
		Render.h \
		Hatchery.h \
		Tower.h \
		Projectile.h \
		Ant.h
	/usr/bin/moc $(DEFINES) $(INCPATH) Ant.h -o moc_Ant.cpp

moc_Bug.cpp: define.h \
		Render.h \
		Hatchery.h \
		Bug.h \
		Tower.h \
		Projectile.h \
		Bug.h
	/usr/bin/moc $(DEFINES) $(INCPATH) Bug.h -o moc_Bug.cpp

moc_Projectile.cpp: Bug.h \
		define.h \
		Render.h \
		Hatchery.h \
		Tower.h \
		Projectile.h \
		Projectile.h
	/usr/bin/moc $(DEFINES) $(INCPATH) Projectile.h -o moc_Projectile.cpp

moc_Render.cpp: define.h \
		Hatchery.h \
		Bug.h \
		Render.h \
		Tower.h \
		Projectile.h \
		Render.h
	/usr/bin/moc $(DEFINES) $(INCPATH) Render.h -o moc_Render.cpp

moc_Tower.cpp: Projectile.h \
		Bug.h \
		define.h \
		Render.h \
		Hatchery.h \
		Tower.h \
		Tower.h
	/usr/bin/moc $(DEFINES) $(INCPATH) Tower.h -o moc_Tower.cpp

moc_UI.cpp: Tower.h \
		Projectile.h \
		Bug.h \
		define.h \
		Render.h \
		Hatchery.h \
		UI.h
	/usr/bin/moc $(DEFINES) $(INCPATH) UI.h -o moc_UI.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean 

####### Compile

Ant.o: Ant.cpp Ant.h \
		Bug.h \
		define.h \
		Render.h \
		Hatchery.h \
		Tower.h \
		Projectile.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Ant.o Ant.cpp

Bowling.o: Bowling.cpp Bowling.h \
		Projectile.h \
		Bug.h \
		define.h \
		Render.h \
		Hatchery.h \
		Tower.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Bowling.o Bowling.cpp

Bug.o: Bug.cpp Bug.h \
		define.h \
		Render.h \
		Hatchery.h \
		Tower.h \
		Projectile.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Bug.o Bug.cpp

Hatchery.o: Hatchery.cpp Hatchery.h \
		Bug.h \
		define.h \
		Render.h \
		Tower.h \
		Projectile.h \
		Ant.h \
		Wasp.h \
		Roach.h \
		Mosquito.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Hatchery.o Hatchery.cpp

main.o: main.cpp define.h \
		Render.h \
		Hatchery.h \
		Bug.h \
		Tower.h \
		Projectile.h \
		UI.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cpp

Mosquito.o: Mosquito.cpp Mosquito.h \
		Bug.h \
		define.h \
		Render.h \
		Hatchery.h \
		Tower.h \
		Projectile.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Mosquito.o Mosquito.cpp

Paintball.o: Paintball.cpp Paintball.h \
		Projectile.h \
		Bug.h \
		define.h \
		Render.h \
		Hatchery.h \
		Tower.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Paintball.o Paintball.cpp

Projectile.o: Projectile.cpp Projectile.h \
		Bug.h \
		define.h \
		Render.h \
		Hatchery.h \
		Tower.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Projectile.o Projectile.cpp

Render.o: Render.cpp Render.h \
		define.h \
		Hatchery.h \
		Bug.h \
		Tower.h \
		Projectile.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Render.o Render.cpp

Roach.o: Roach.cpp Roach.h \
		Bug.h \
		define.h \
		Render.h \
		Hatchery.h \
		Tower.h \
		Projectile.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Roach.o Roach.cpp

Stone.o: Stone.cpp Stone.h \
		Projectile.h \
		Bug.h \
		define.h \
		Render.h \
		Hatchery.h \
		Tower.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Stone.o Stone.cpp

Tower.o: Tower.cpp Tower.h \
		Projectile.h \
		Bug.h \
		define.h \
		Render.h \
		Hatchery.h \
		Water.h \
		Stone.h \
		Paintball.h \
		Bowling.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Tower.o Tower.cpp

UI.o: UI.cpp UI.h \
		Tower.h \
		Projectile.h \
		Bug.h \
		define.h \
		Render.h \
		Hatchery.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o UI.o UI.cpp

Wasp.o: Wasp.cpp Wasp.h \
		Bug.h \
		define.h \
		Render.h \
		Hatchery.h \
		Tower.h \
		Projectile.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Wasp.o Wasp.cpp

Water.o: Water.cpp Water.h \
		Projectile.h \
		Bug.h \
		define.h \
		Render.h \
		Hatchery.h \
		Tower.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Water.o Water.cpp

moc_Ant.o: moc_Ant.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_Ant.o moc_Ant.cpp

moc_Bug.o: moc_Bug.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_Bug.o moc_Bug.cpp

moc_Projectile.o: moc_Projectile.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_Projectile.o moc_Projectile.cpp

moc_Render.o: moc_Render.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_Render.o moc_Render.cpp

moc_Tower.o: moc_Tower.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_Tower.o moc_Tower.cpp

moc_UI.o: moc_UI.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_UI.o moc_UI.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

